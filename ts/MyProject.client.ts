/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, ExecuteMsg, AssetType, QueryMsg, String } from "./MyProject.types";
export interface MyProjectReadOnlyInterface {
  contractAddress: string;
  fractionalOwnership: ({
    owner,
    tokenId
  }: {
    owner: string;
    tokenId: number;
  }) => Promise<Uint128>;
  tokenURI: ({
    tokenId
  }: {
    tokenId: number;
  }) => Promise<String>;
}
export class MyProjectQueryClient implements MyProjectReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.fractionalOwnership = this.fractionalOwnership.bind(this);
    this.tokenURI = this.tokenURI.bind(this);
  }

  fractionalOwnership = async ({
    owner,
    tokenId
  }: {
    owner: string;
    tokenId: number;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      fractional_ownership: {
        owner,
        token_id: tokenId
      }
    });
  };
  tokenURI = async ({
    tokenId
  }: {
    tokenId: number;
  }): Promise<String> => {
    return this.client.queryContractSmart(this.contractAddress, {
      token_u_r_i: {
        token_id: tokenId
      }
    });
  };
}
export interface MyProjectInterface extends MyProjectReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createAsset: ({
    assetType,
    price,
    totalSupply,
    uri
  }: {
    assetType: AssetType;
    price: Uint128;
    totalSupply: Uint128;
    uri: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  transferOwnership: ({
    amount,
    to,
    tokenId
  }: {
    amount: Uint128;
    to: string;
    tokenId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mintSmartToken: ({
    amount,
    to
  }: {
    amount: Uint128;
    to: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  transferSmartToken: ({
    amount,
    to
  }: {
    amount: Uint128;
    to: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MyProjectClient extends MyProjectQueryClient implements MyProjectInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createAsset = this.createAsset.bind(this);
    this.transferOwnership = this.transferOwnership.bind(this);
    this.mintSmartToken = this.mintSmartToken.bind(this);
    this.transferSmartToken = this.transferSmartToken.bind(this);
  }

  createAsset = async ({
    assetType,
    price,
    totalSupply,
    uri
  }: {
    assetType: AssetType;
    price: Uint128;
    totalSupply: Uint128;
    uri: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_asset: {
        asset_type: assetType,
        price,
        total_supply: totalSupply,
        uri
      }
    }, fee, memo, _funds);
  };
  transferOwnership = async ({
    amount,
    to,
    tokenId
  }: {
    amount: Uint128;
    to: string;
    tokenId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer_ownership: {
        amount,
        to,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  mintSmartToken = async ({
    amount,
    to
  }: {
    amount: Uint128;
    to: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_smart_token: {
        amount,
        to
      }
    }, fee, memo, _funds);
  };
  transferSmartToken = async ({
    amount,
    to
  }: {
    amount: Uint128;
    to: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer_smart_token: {
        amount,
        to
      }
    }, fee, memo, _funds);
  };
}